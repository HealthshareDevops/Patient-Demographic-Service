name: Patient demographic service CI/CD pipeline

on:
  push:
    branches: 
      - develop
      - feature/*
      
  workflow_dispatch:

env:
  NETCORE_VERSION: '3.1.x'
  SOLUTION_NAME: PatientDemographicService
  
jobs:
  # build-MessageProcessorLambda-sandbox:
  #   if: startsWith(github.ref, 'refs/heads/feature/') && github.event_name == 'push'
    
  #   runs-on: ubuntu-latest

  #   env:
  #     PROJECT_NAME: MessageProcessorLambda
  #     ENVIRONMENT_NAME: sandbox
  #     AWS_S3_BUCKET: mhip-patient-demographic-service-sandbox
  #     AWS_STACKNAME: MessageProcessorLambda-sandbox

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.NETCORE_VERSION }}

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Build
  #       run: dotnet build --no-restore

  #     - name: Test
  #       run: dotnet test --no-build --verbosity normal

  #     - name: Publish
  #       run: dotnet publish --output "./src/MessageProcessor.Lambda/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
  #     - name: Create directory `dist`
  #       run: mkdir -p ./dist

  #     - name: Install zip
  #       uses: montudor/action-zip@v1
      
  #     - name: Zip output 
  #       run: zip -qq -r ${{github.workspace}}/dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
  #       working-directory: ./src/MessageProcessor.Lambda/bin/Release/netcoreapp3.1/publish/
      
  #     - name: Configure AWS credentials from sandbox account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{secrets.SANDBOX_AWS_ACCESS_KEY}}
  #         aws-secret-access-key: ${{secrets.SANDBOX_AWS_SECRET_KEY}}
  #         aws-session-token: ${{secrets.SANDBOX_AWS_SESSION_TOKEN}}
  #         aws-region: ap-southeast-2
      
  #     - name: Copy files to the test website with the AWS CLI
  #       run: aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

  #     - name: Deploy to AWS CloudFormation
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{env.AWS_STACKNAME}}
  #         template: "./cloudformation/message-infra-cfn.yml"
  #         no-fail-on-empty-changeset: "1"
  #         parameter-overrides: >-
  #           Environment=${{env.ENVIRONMENT_NAME}},
  #           BucketName=${{env.AWS_S3_BUCKET}},
  #           CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
  #           ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
  #           ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
  #         capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"

  # build-MissingDataLambda-sandbox:
  #   if: startsWith(github.ref, 'refs/heads/feature/') && github.event_name == 'push'
    
  #   runs-on: ubuntu-latest

  #   env:
  #     PROJECT_NAME: MissingDataLambda
  #     ENVIRONMENT_NAME: sandbox
  #     AWS_S3_BUCKET: mhip-patient-demographic-service-sandbox
  #     AWS_STACKNAME: MissingDataLambda-sandbox

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.NETCORE_VERSION }}

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Build
  #       run: dotnet build --no-restore

  #     - name: Test
  #       run: dotnet test --no-build --verbosity normal

  #     - name: Publish
  #       run: dotnet publish --output "./src/MissingData.Lambda/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
  #     - name: Create directory `dist`
  #       run: mkdir -p ./dist

  #     - name: Install zip
  #       uses: montudor/action-zip@v1
      
  #     - name: Zip output 
  #       run: zip -qq -r ${{github.workspace}}/dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
  #       working-directory: ./src/MissingData.Lambda/bin/Release/netcoreapp3.1/publish/
    
  #     - name: Configure AWS credentials from sandbox account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{secrets.SANDBOX_AWS_ACCESS_KEY}}
  #         aws-secret-access-key: ${{secrets.SANDBOX_AWS_SECRET_KEY}}
  #         aws-session-token: ${{secrets.SANDBOX_AWS_SESSION_TOKEN}}
  #         aws-region: ap-southeast-2
      
  #     - name: Copy files to the test website with the AWS CLI
  #       run: aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

  #     - name: Deploy to AWS CloudFormation
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{env.AWS_STACKNAME}}
  #         template: "./cloudformation/missing-data-cfn.yml"
  #         no-fail-on-empty-changeset: "1"
  #         parameter-overrides: >-
  #           Environment=${{env.ENVIRONMENT_NAME}},
  #           BucketName=${{env.AWS_S3_BUCKET}},
  #           CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
  #           ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
  #           ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
  #         capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"

  build-PatientServiceAPI-sandbox:
    if: startsWith(github.ref, 'refs/heads/feature/') && github.event_name == 'push'
    
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: PatientServiceWebAPI
      ENVIRONMENT_NAME: sandbox
      AWS_S3_BUCKET: mhip-patient-demographic-service-sandbox
      AWS_STACKNAME: PatientServiceWebAPI-sandbox

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish
        run: dotnet publish --output "./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
      - name: Create directory `dist-webapi`
        run: mkdir -p ./dist-webapi
      
      - name: zip-files
        uses: vimtor/action-zip@v1
        with:
          files: ./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish/
          dest: ./dist-webapi/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip
    
      - name: Configure AWS credentials from sandbox account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.SANDBOX_AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.SANDBOX_AWS_SECRET_KEY}}
          aws-session-token: ${{secrets.SANDBOX_AWS_SESSION_TOKEN}}
          aws-region: ap-southeast-2
      
      - name: Copy files to the test website with the AWS CLI
        run: aws s3 cp ./dist-webapi/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.AWS_STACKNAME}}
          template: "./cloudformation/patient-service-serverless.template"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ProjectName=${{env.SOLUTION_NAME}},
            Environment=${{env.ENVIRONMENT_NAME}},
            BucketName=${{env.AWS_S3_BUCKET}},
            CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
            ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
            ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
          capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"

  # build-MessageProcessorLambda-dev:
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
  #   runs-on: ubuntu-latest

  #   env:
  #     PROJECT_NAME: MessageProcessorLambda
  #     ENVIRONMENT_NAME: dev
  #     AWS_S3_BUCKET: mhip-patient-demographic-service-dev
  #     AWS_STACKNAME: MessageProcessorLambda-dev
  #     AWS_CFN_EXECUTION_ROLE: arn:aws:iam::436686904706:role/AWSCloudFormationExecution

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.NETCORE_VERSION }}

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Build
  #       run: dotnet build --no-restore

  #     - name: Test
  #       run: dotnet test --no-build --verbosity normal

  #     - name: Publish
  #       run: dotnet publish --output "./src/MessageProcessor.Lambda/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
  #     - name: Create directory `dist`
  #       run: mkdir -p ./dist

  #     - name: Install zip
  #       uses: montudor/action-zip@v1
      
  #     - name: Zip output 
  #       run: zip -qq -r ${{github.workspace}}/dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
  #       working-directory: ./src/MessageProcessor.Lambda/bin/Release/netcoreapp3.1/publish/
      
  #     - name: Configure AWS credentials from sandbox account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{secrets.DEV_AWS_ACCESS_KEY}}
  #         aws-secret-access-key: ${{secrets.DEV_AWS_SECRET_KEY}}
  #         aws-session-token: ${{secrets.DEV_AWS_SESSION_TOKEN}}
  #         aws-region: ap-southeast-2
      
  #     - name: Copy files to the test website with the AWS CLI
  #       run: aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

  #     - name: Deploy to AWS CloudFormation
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{env.AWS_STACKNAME}}
  #         template: "./cloudformation/message-infra-cfn.yml"
  #         no-fail-on-empty-changeset: "1"
  #         parameter-overrides: >-
  #           Environment=${{env.ENVIRONMENT_NAME}},
  #           BucketName=${{env.AWS_S3_BUCKET}},
  #           CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
  #           ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
  #           ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
  #         capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
  #         role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}

  # build-MissingDataLambda-dev:
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
  #   runs-on: ubuntu-latest

  #   env:
  #     PROJECT_NAME: MissingDataLambda
  #     ENVIRONMENT_NAME: dev
  #     AWS_S3_BUCKET: mhip-patient-demographic-service-dev
  #     AWS_STACKNAME: MissingDataLambda-dev
  #     AWS_CFN_EXECUTION_ROLE: arn:aws:iam::436686904706:role/AWSCloudFormationExecution

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.NETCORE_VERSION }}

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Build
  #       run: dotnet build --no-restore

  #     - name: Test
  #       run: dotnet test --no-build --verbosity normal

  #     - name: Publish
  #       run: dotnet publish --output "./src/MissingData.Lambda/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
  #     - name: Create directory `dist`
  #       run: mkdir -p ./dist

  #     - name: Install zip
  #       uses: montudor/action-zip@v1
      
  #     - name: Zip output 
  #       run: zip -qq -r ${{github.workspace}}/dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
  #       working-directory: ./src/MissingData.Lambda/bin/Release/netcoreapp3.1/publish/
    
  #     - name: Configure AWS credentials from sandbox account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{secrets.DEV_AWS_ACCESS_KEY}}
  #         aws-secret-access-key: ${{secrets.DEV_AWS_SECRET_KEY}}
  #         aws-session-token: ${{secrets.DEV_AWS_SESSION_TOKEN}}
  #         aws-region: ap-southeast-2
      
  #     - name: Copy files to the test website with the AWS CLI
  #       run: aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

  #     - name: Deploy to AWS CloudFormation
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{env.AWS_STACKNAME}}
  #         template: "./cloudformation/missing-data-cfn.yml"
  #         no-fail-on-empty-changeset: "1"
  #         parameter-overrides: >-
  #           Environment=${{env.ENVIRONMENT_NAME}},
  #           BucketName=${{env.AWS_S3_BUCKET}},
  #           CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
  #           ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
  #           ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
  #         capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
  #         role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}

  # build-PatientServiceAPI-dev:
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
  #   runs-on: ubuntu-latest

  #   env:
  #     PROJECT_NAME: PatientServiceWebAPI
  #     ENVIRONMENT_NAME: dev
  #     AWS_S3_BUCKET: mhip-patient-demographic-service-dev
  #     AWS_STACKNAME: PatientServiceWebAPI-dev
  #     AWS_CFN_EXECUTION_ROLE: arn:aws:iam::436686904706:role/AWSCloudFormationExecution

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.NETCORE_VERSION }}

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Build
  #       run: dotnet build --no-restore

  #     - name: Test
  #       run: dotnet test --no-build --verbosity normal

  #     - name: Publish
  #       run: dotnet publish --output "./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
  #     - name: Create directory `dist`
  #       run: mkdir -p ./dist

  #     - name: Install zip
  #       uses: montudor/action-zip@v1
      
  #     - name: Zip output 
  #       run: zip -qq -r ${{github.workspace}}/dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
  #       working-directory: ./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish/
    
  #     - name: Configure AWS credentials from sandbox account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{secrets.DEV_AWS_ACCESS_KEY}}
  #         aws-secret-access-key: ${{secrets.DEV_AWS_SECRET_KEY}}
  #         aws-session-token: ${{secrets.DEV_AWS_SESSION_TOKEN}}
  #         aws-region: ap-southeast-2
      
  #     - name: Copy files to the test website with the AWS CLI
  #       run: aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

  #     - name: Deploy to AWS CloudFormation
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{env.AWS_STACKNAME}}
  #         template: "./cloudformation/patient-service-serverless.template"
  #         no-fail-on-empty-changeset: "1"
  #         parameter-overrides: >-
  #           ProjectName=${{env.SOLUTION_NAME}},
  #           Environment=${{env.ENVIRONMENT_NAME}},
  #           BucketName=${{env.AWS_S3_BUCKET}},
  #           CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
  #           ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
  #           ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
  #         capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
  #         role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}
