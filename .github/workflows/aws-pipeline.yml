name: Patient demographic service CI/CD pipeline

on:
  push:
    branches: 
      - develop
      - feature/*
      
  workflow_dispatch:

env:
  NETCORE_VERSION: '3.1.x'
  
jobs:

  build-PatientServiceApi-sandbox:
    if: startsWith(github.ref, 'refs/heads/feature/') && github.event_name == 'push'
    
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: PatientServiceWebApi
      ENVIRONMENT_NAME: sandbox
      AWS_S3_BUCKET: patient-demographic-service-sandbox
      AWS_STACKNAME: patient-service-sandbox-stack

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish
        run: dotnet publish --output "./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
      
      - name: Create directory `dist`
        run: mkdir -p ./dist

      - name: Zip files
        uses: montudor/action-zip@v1
        with: 
          args: zip -qq ./dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip ./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish/
      
      # - name: zip-files
      #   uses: vimtor/action-zip@v1
      #   with:
      #     files: ./src/PatientService.WebAPI/bin/Release/netcoreapp3.1/publish/
      #     dest: ./dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip
    
      - name: Configure AWS credentials from sandbox account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.SANDBOX_AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.SANDBOX_AWS_SECRET_KEY}}
          aws-region: ap-southeast-2
      
      - name: Copy files to the test website with the AWS CLI
        run: aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.AWS_STACKNAME}}
          template: "./cloudformation/patient-service-serverless.template"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            BucketName=${{env.AWS_S3_BUCKET}},
            CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip
          capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
