name: Patient demographic service CI/CD pipeline for test environment

on:
  push:
    branches: 
      - main

  workflow_dispatch:

env:
  NETCORE_VERSION: '6.0.x'
  SOLUTION_NAME: PatientDemographicService
  ENVIRONMENT_NAME: test
  AWS_S3_BUCKET: mhip-patient-demographic-service-test
  AWS_CFN_EXECUTION_ROLE: arn:aws:iam::071693856754:role/AWSCloudFormationExecution
  PUBLISH_DIR: ./bin/Release/net6.0/publish
  PUBLISH_FRAMEWORK: 'net6.0'

jobs:
  build-MessageProcessorLambda-test:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: MessageProcessorLambda     
      AWS_STACKNAME: MessageProcessorLambda-test
      PROJECT_DIR: ./src/MessageProcessor.Lambda/

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Restore dependencies ${{env.PROJECT_DIR}}
        run: dotnet restore
        working-directory: ${{env.PROJECT_DIR}}

      - name: Build ${{env.PROJECT_DIR}}
        run: dotnet build --no-restore
        working-directory: ${{env.PROJECT_DIR}}

      - name: Test ${{env.PROJECT_DIR}}
        run: dotnet test --no-build --verbosity normal
        working-directory: ${{env.PROJECT_DIR}}

      - name: Publish ${{env.PROJECT_DIR}}
        run: dotnet publish --output ${{env.PUBLISH_DIR}} --configuration "Release" --framework ${{env.PUBLISH_FRAMEWORK}} /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
        working-directory: ${{env.PROJECT_DIR}}

      - name: Create directory `dist-message`
        run: mkdir -p ./dist-message

      - name: Install zip
        uses: montudor/action-zip@v1
      
      - name: Zip output 
        run: zip -qq -r ${{github.workspace}}/dist-message/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
        working-directory: ${{env.PROJECT_DIR}}${{env.PUBLISH_DIR}}
      
      - name: Configure AWS credentials from sandbox account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.TEST_AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.TEST_AWS_SECRET_KEY}}
          aws-session-token: ${{secrets.TEST_AWS_SESSION_TOKEN}}
          aws-region: ap-southeast-2
      
      - name: Copy files to the S3 bucket with the AWS CLI
        run: aws s3 cp ./dist-message/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.AWS_STACKNAME}}
          template: "./cloudformation/message-infra-cfn.yml"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ProjectName=${{env.SOLUTION_NAME}},
            Environment=${{env.ENVIRONMENT_NAME}},
            BucketName=${{env.AWS_S3_BUCKET}},
            CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
            ParamStoreKMSMasterKeyIdARN=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/KMS-Master-KeyIdARN,
            ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
            ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
          capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
          role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}

  build-MissingDataLambda-test:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: MissingDataLambda
      AWS_STACKNAME: MissingDataLambda-test
      PROJECT_DIR: ./src/MissingData.Lambda/

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Restore dependencies ${{env.PROJECT_DIR}}
        run: dotnet restore
        working-directory: ${{env.PROJECT_DIR}}

      - name: Build ${{env.PROJECT_DIR}}
        run: dotnet build --no-restore
        working-directory: ${{env.PROJECT_DIR}}

      - name: Test ${{env.PROJECT_DIR}}
        run: dotnet test --no-build --verbosity normal
        working-directory: ${{env.PROJECT_DIR}}

      - name: Publish ${{env.PROJECT_DIR}}
        run: dotnet publish --output ${{env.PUBLISH_DIR}} --configuration "Release" --framework ${{env.PUBLISH_FRAMEWORK}} /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
        working-directory: ${{env.PROJECT_DIR}}

      - name: Create directory `dist-missing`
        run: mkdir -p ./dist-missing

      - name: Install zip
        uses: montudor/action-zip@v1
      
      - name: Zip output 
        run: zip -qq -r ${{github.workspace}}/dist-missing/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
        working-directory: ${{env.PROJECT_DIR}}${{env.PUBLISH_DIR}}
    
      - name: Configure AWS credentials from sandbox account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.TEST_AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.TEST_AWS_SECRET_KEY}}
          aws-session-token: ${{secrets.TEST_AWS_SESSION_TOKEN}}
          aws-region: ap-southeast-2
      
      - name: Copy files to the S3 bucket with the AWS CLI
        run: aws s3 cp ./dist-missing/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.AWS_STACKNAME}}
          template: "./cloudformation/missing-data-cfn.yml"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            Environment=${{env.ENVIRONMENT_NAME}},
            BucketName=${{env.AWS_S3_BUCKET}},
            CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
            ParamStoreKMSMasterKeyIdARN=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/KMS-Master-KeyIdARN,
            ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
            ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
          capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
          role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}

  build-PatientServiceAPI-test:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: PatientServiceWebAPI
      AWS_STACKNAME: PatientServiceWebAPI-test
      PROJECT_DIR: ./src/PatientService.WebAPI/

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Restore dependencies ${{env.PROJECT_DIR}}
        run: dotnet restore
        working-directory: ${{env.PROJECT_DIR}}

      - name: Build ${{env.PROJECT_DIR}}
        run: dotnet build --no-restore
        working-directory: ${{env.PROJECT_DIR}}

      - name: Test ${{env.PROJECT_DIR}}
        run: dotnet test --no-build --verbosity normal
        working-directory: ${{env.PROJECT_DIR}}

      - name: Publish ${{env.PROJECT_DIR}}
        run: dotnet publish --output ${{env.PUBLISH_DIR}} --configuration "Release" --framework ${{env.PUBLISH_FRAMEWORK}} /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false 
        working-directory: ${{env.PROJECT_DIR}}
      
      - name: Create directory `dist-webapi`
        run: mkdir -p ./dist-webapi

      - name: Install zip
        uses: montudor/action-zip@v1
      
      - name: Zip output 
        run: zip -qq -r ${{github.workspace}}/dist-webapi/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip .
        working-directory: ${{env.PROJECT_DIR}}${{env.PUBLISH_DIR}}
    
      - name: Configure AWS credentials from sandbox account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.TEST_AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.TEST_AWS_SECRET_KEY}}
          aws-session-token: ${{secrets.TEST_AWS_SESSION_TOKEN}}
          aws-region: ap-southeast-2
      
      - name: Copy files to the S3 bucket with the AWS CLI
        run: aws s3 cp ./dist-webapi/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.AWS_STACKNAME}}
          template: "./cloudformation/patient-service-serverless.template"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ProjectName=${{env.SOLUTION_NAME}},
            Environment=${{env.ENVIRONMENT_NAME}},
            BucketName=${{env.AWS_S3_BUCKET}},
            CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip,
            ParamStoreLambdaSecurityGroupIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-Security-GroupIds,
            ParamStoreLambdaSubnetIds=/${{env.SOLUTION_NAME}}/${{env.ENVIRONMENT_NAME}}/CloudFormation/Lambda-SubnetIds
          capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
          role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}
  
  build-All-Infra-test:
    runs-on: ubuntu-latest

    env:
      AWS_STACKNAME: PatientDemographic-All-Infra-test

    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials from sandbox account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.test_AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.test_AWS_SECRET_KEY}}
          aws-session-token: ${{secrets.test_AWS_SESSION_TOKEN}}
          aws-region: ap-southeast-2

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.AWS_STACKNAME}}
          template: "./cloudformation/cognito-cfn.yml"
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ProjectName=${{env.SOLUTION_NAME}},
            Environment=${{env.ENVIRONMENT_NAME}}
          capabilities: "CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND"
          role-arn: ${{env.AWS_CFN_EXECUTION_ROLE}}
